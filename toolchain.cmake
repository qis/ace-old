# Toolchain
include_guard(GLOBAL)

# Standard
set(CMAKE_C_STANDARD 11 CACHE STRING "")
set(CMAKE_C_STANDARD_REQUIRED ON CACHE BOOL "")
set(CMAKE_C_EXTENSIONS OFF CACHE BOOL "")

set(CMAKE_CXX_STANDARD 20 CACHE STRING "")
set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")

if(WIN32)
  # Toolset
  set(CMAKE_C_COMPILER "cl.exe" CACHE STRING "")
  set(CMAKE_CXX_COMPILER "cl.exe" CACHE STRING "")
  set(CMAKE_RC_COMPILER "rc.exe" CACHE STRING "")
  set(CMAKE_LINKER "link.exe" CACHE STRING "")
  set(CMAKE_AR "lib.exe" CACHE STRING "")

  # Runtime
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:RelWithDebInfo>:DLL>")
  set(CMAKE_MSVC_RUNTIME_LIBRARY "${CMAKE_MSVC_RUNTIME_LIBRARY}$<$<CONFIG:Debug>:DebugDLL>")
  set(CMAKE_MSVC_RUNTIME_LIBRARY "${CMAKE_MSVC_RUNTIME_LIBRARY}" CACHE STRING "")

  # Base Flags
  set(BASE_FLAGS "/permissive- /diagnostics:column /FC /W3")
  set(BASE_FLAGS "${BASE_FLAGS} /wd4101 /wd4275 /wd26812 /wd28251")
  set(BASE_FLAGS "${BASE_FLAGS} /DWINVER=0x0A00 /D_WIN32_WINNT=0x0A00")
  set(BASE_FLAGS "${BASE_FLAGS} /DWIN32 /D_WINDOWS /DNOMINMAX /DWIN32_LEAN_AND_MEAN")
  set(BASE_FLAGS "${BASE_FLAGS} /D_ATL_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_WARNINGS")
  set(BASE_FLAGS "${BASE_FLAGS} /D_CRT_SECURE_NO_DEPRECATE /D_CRT_SECURE_NO_WARNINGS")
  set(BASE_FLAGS "${BASE_FLAGS} /D_CRT_NONSTDC_NO_DEPRECATE")

  # Compiler Flags
  set(CMAKE_C_FLAGS "/arch:AVX2 ${BASE_FLAGS} /utf-8" CACHE STRING "")
  set(CMAKE_C_FLAGS_DEBUG "/Od /sdl /RTC1 /ZI /JMC /DACE_SHARED" CACHE STRING "")
  set(CMAKE_C_FLAGS_RELEASE "/O2 /Oi /GS- /GL /analyze- /DNDEBUG" CACHE STRING "")
  set(CMAKE_C_FLAGS_MINSIZEREL "/O1 /Oi /GS- /GL /analyze- /DNDEBUG" CACHE STRING "")
  set(CMAKE_C_FLAGS_RELWITHDEBINFO "/O1 /Oi /GS- /ZI /JMC /DNDEBUG /DACE_SHARED" CACHE STRING "")

  set(CMAKE_CXX_FLAGS "/EHsc ${CMAKE_C_FLAGS} /Zc:__cplusplus" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CACHE STRING "")

  # Linker Flags
  foreach(LINKER SHARED_LINKER MODULE_LINKER EXE_LINKER)
    set(CMAKE_${LINKER}_FLAGS "" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_DEBUG "/DEBUG:FASTLINK" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_RELEASE "/OPT:REF /OPT:ICF /INCREMENTAL:NO /LTCG" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_MINSIZEREL "/OPT:REF /OPT:ICF /INCREMENTAL:NO /LTCG" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_RELWITHDEBINFO "/DEBUG:FASTLINK" CACHE STRING "")
  endforeach()

  # Disable logo for compiler and linker.
  set(CMAKE_CL_NOLOGO "/nologo" CACHE STRING "")

  # Assembler Flags
  set(CMAKE_ASM_MASM_FLAGS_INIT "/nologo")

  # Resource Compiler Flags
  set(CMAKE_RC_FLAGS_INIT "/nologo /c65001")
  set(CMAKE_RC_FLAGS_DEBUG_INIT "")
  set(CMAKE_RC_FLAGS_RELEASE_INIT "/DNDEBUG")
  set(CMAKE_RC_FLAGS_MINSIZEREL_INIT "/DNDEBUG")
  set(CMAKE_RC_FLAGS_RELWITHDEBINFO_INIT "/DNDEBUG")

  # Cleanup
  unset(BASE_FLAGS)
else()
  # Toolset
  set(CMAKE_C_COMPILER "gcc-10" CACHE STRING "")
  set(CMAKE_CXX_COMPILER "g++-10" CACHE STRING "")
  set(CMAKE_RANLIB "gcc-ranlib-10" CACHE STRING "")
  set(CMAKE_AR "gcc-ar-10" CACHE STRING "")
  set(CMAKE_NM "gcc-nm-10" CACHE STRING "")

  # Base Flags
  set(BASE_FLAGS "-Wall -Wextra -Wpedantic -Wno-unused-parameter -Wno-unused-variable")
  set(BASE_FLAGS "${BASE_FLAGS} -fdiagnostics-color=always -D_DEFAULT_SOURCE=1")

  # Compiler Flags
  set(CMAKE_C_FLAGS "-mavx2 -fasm ${BASE_FLAGS} -pthread" CACHE STRING "")
  set(CMAKE_C_FLAGS_DEBUG "-O0 -g -DACE_SHARED" CACHE STRING "")
  set(CMAKE_C_FLAGS_RELEASE "-O3 -flto -DNDEBUG" CACHE STRING "")
  set(CMAKE_C_FLAGS_MINSIZEREL "-Os -flto -DNDEBUG" CACHE STRING "")
  set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG -DACE_SHARED" CACHE STRING "")

  set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -fcoroutines" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CACHE STRING "")

  # Linker Flags
  foreach(LINKER SHARED_LINKER MODULE_LINKER EXE_LINKER)
    set(CMAKE_${LINKER}_FLAGS "-Wl,--as-needed" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_DEBUG "" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_RELEASE "-Wl,-s -static-libstdc++" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_MINSIZEREL "-Wl,-s -static-libstdc++" CACHE STRING "")
    set(CMAKE_${LINKER}_FLAGS_RELWITHDEBINFO "" CACHE STRING "")
  endforeach()

  # Position Independent Code
  set(CMAKE_POSITION_INDEPENDENT_CODE ON CACHE BOOL "")

  # Runtime Path
  if(NOT CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CMAKE_BUILD_WITH_INSTALL_RPATH ON CACHE BOOL "")
    set(CMAKE_INSTALL_RPATH "${CMAKE_CURRENT_LIST_DIR}/lib" CACHE STRING "")
  endif()

  # Cleanup
  unset(BASE_FLAGS)

  if(VSCODE)
    set(VSCODE_INCLUDE "-include ${CMAKE_CURRENT_LIST_DIR}/ports/coroutine.hpp")
    set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -fcoroutines ${VSCODE_INCLUDE}" CACHE STRING "" FORCE)
  endif()
endif()

# Include Directories
include_directories(BEFORE ${CMAKE_CURRENT_LIST_DIR}/include)

# Library Prefix
if(WIN32)
  set(__LIBRARY_PREFIX "${CMAKE_CURRENT_LIST_DIR}/lib/")
else()
  set(__LIBRARY_PREFIX "${CMAKE_CURRENT_LIST_DIR}/lib/lib")
endif()

# Library Suffix
if(WIN32)
  set(__LIBRARY_SUFFIX_DEBUG "d.lib")
  set(__LIBRARY_SUFFIX_RELEASE "r.lib")
  set(__LIBRARY_SUFFIX_MINSIZEREL "m.lib")
  set(__LIBRARY_SUFFIX_RELWITHDEBINFO "i.lib")
else()
  set(__LIBRARY_SUFFIX_DEBUG "d.so")
  set(__LIBRARY_SUFFIX_RELEASE "r.a")
  set(__LIBRARY_SUFFIX_MINSIZEREL "m.a")
  set(__LIBRARY_SUFFIX_RELWITHDEBINFO "i.so")
endif()

# Libraries
set(__LIBRARIES)
list(APPEND __LIBRARIES benchmark fmt tz pugixml tbb)
list(APPEND __LIBRARIES brotli bzip2 lzma zlib zstd)
list(APPEND __LIBRARIES jpeg png webp)

if(NOT TARGET ace::doctest)
  if(WIN32)
    list(APPEND __LIBRARIES doctest)
  else()
    add_library(ace::doctest UNKNOWN IMPORTED)
    if(EXISTS ${__LIBRARY_PREFIX}doctesti.so)
      set_target_properties(ace::doctest PROPERTIES
        IMPORTED_LOCATION_DEBUG "${__LIBRARY_PREFIX}doctestd.so"
        IMPORTED_LOCATION_RELEASE "${__LIBRARY_PREFIX}doctestr.so"
        IMPORTED_LOCATION_MINSIZEREL "${__LIBRARY_PREFIX}doctestm.so"
        IMPORTED_LOCATION_RELWITHDEBINFO "${__LIBRARY_PREFIX}doctesti.so"
        IMPORTED_CONFIGURATIONS "DEBUG;RELEASE;MINSIZEREL;RELWITHDEBINFO")
    endif()
  endif()
endif()

foreach(port ${__LIBRARIES})
  if(NOT TARGET ace::${port})
    add_library(ace::${port} UNKNOWN IMPORTED)
    if(EXISTS ${__LIBRARY_PREFIX}${port}${__LIBRARY_SUFFIX_RELWITHDEBINFO})
      set_target_properties(ace::${port} PROPERTIES
        IMPORTED_LOCATION_DEBUG "${__LIBRARY_PREFIX}${port}${__LIBRARY_SUFFIX_DEBUG}"
        IMPORTED_LOCATION_RELEASE "${__LIBRARY_PREFIX}${port}${__LIBRARY_SUFFIX_RELEASE}"
        IMPORTED_LOCATION_MINSIZEREL "${__LIBRARY_PREFIX}${port}${__LIBRARY_SUFFIX_MINSIZEREL}"
        IMPORTED_LOCATION_RELWITHDEBINFO "${__LIBRARY_PREFIX}${port}${__LIBRARY_SUFFIX_RELWITHDEBINFO}"
        IMPORTED_CONFIGURATIONS "DEBUG;RELEASE;MINSIZEREL;RELWITHDEBINFO")
    endif()
  endif()
endforeach()

# Dependencies
if(WIN32)
  set_property(TARGET ace::benchmark APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES "shlwapi.lib")

  set_property(TARGET ace::webp APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES "shlwapi.lib;windowscodecs.lib")
else()
  set_property(TARGET ace::tbb APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES "dl")

  set_property(TARGET ace::brotli APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES "m")

  set_property(TARGET ace::webp APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES "m")
endif()

set_property(TARGET ace::png APPEND PROPERTY
  INTERFACE_LINK_LIBRARIES "ace::zlib")

set_property(TARGET ace::webp APPEND PROPERTY
  INTERFACE_LINK_LIBRARIES "ace::jpeg;ace::png")

# Cleanup
unset(__LIBRARY_PREFIX)
unset(__LIBRARY_SUFFIX)
unset(__LIBRARIES)

# CMake
set(IGNORE_TOOLCHAIN_FILE_VARIABLE "${CMAKE_TOOLCHAIN_FILE}")
mark_as_advanced(IGNORE_TOOLCHAIN_FILE_VARIABLE)
